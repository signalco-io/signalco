# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: '[Web] Vercel Deploy'

on:
    workflow_call:
        inputs:
            name:
                required: true
                type: string
                description: 'Name of the package or application to analzye'
            path:
                required: true
                type: string
                description: 'Path to the package or application to analzye'
            vercelProjectId:
                required: true
                type: string
                description: 'Vercel Project ID'
            preview:
                required: false
                type: boolean
                description: 'Whether to deploy to preview or production'
                default: true
            environment:
                required: false
                type: string
                description: 'Environment to deploy to, can be preview, development, or production'
                default: 'preview'

env:
    TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
    TURBO_TEAM: signalco
    TURBO_REMOTE_ONLY: true
    VERCEL_PROJECT_ID: ${{ inputs.vercelProjectId }}
    VERCEL_ORG_ID: team_Ade0MlfC3211ml3wYJZ4c9hn

defaults:
    run:      
        working-directory: ./web

jobs:
    ci:
        timeout-minutes: 5
        runs-on: ubuntu-latest
        concurrency:
          group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.name }}
          cancel-in-progress: true
        steps:
          - uses: actions/checkout@v4
            with:
              fetch-depth: 2

          - name: ‚ú® Setup pnpm
            uses: pnpm/action-setup@v2.4.0
            with:
              version: 'latest'

          - name: ‚ú® Setup Node.js
            uses: actions/setup-node@v4
            with:
                node-version: "20.x"
                cache: "pnpm"
                cache-dependency-path: ./web/pnpm-lock.yaml

          - name: üì¶Ô∏è Install dependencies
            run: pnpm install --frozen-lockfile --filter ${{ inputs.name }}... --filter .

          - name: ‚ú® Setup Vercel CLI
            run: pnpm install --global vercel@latest

          - name: ‚öôÔ∏è Pull Vercel Environment Information
            run: vercel env pull --yes --environment=${{ inputs.environment }} --token=${{ secrets.VERCEL_TOKEN }}
            working-directory: ${{ inputs.path }}/

          - name: ‚öíÔ∏è Build app
            run: pnpm build --filter=${{ inputs.name }}

          - name: üöÄ Deploy Preview to Vercel
            run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
            working-directory: ${{ inputs.path }}/
            if: ${{ inputs.preview == true }}

          - name: üöÄ Deploy Production to Vercel
            run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} ${{ inputs.environment == 'development' && '--skip-domain' }}
            working-directory: ${{ inputs.path }}/
            if: ${{ inputs.preview == false }}

