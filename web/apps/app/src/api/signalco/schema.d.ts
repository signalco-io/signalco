/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/status": {
    get: operations["HealthFunctions"];
  };
  "/website/newsletter-subscribe": {
    /** @description Subscribe to a newsletter. */
    post: operations["NewsletterFunction"];
  };
  "/stations/logging/download": {
    get: operations["StationLoggingDownloadFunction"];
  };
  "/station/logging/list": {
    get: operations["StationLoggingListFunction"];
  };
  "/station/logging/persist": {
    /** @description Appends logging entries. */
    post: operations["StationLoggingPersistFunction"];
  };
  "/station/refresh-token": {
    /** @description Refreshes the access token. */
    post: operations["StationRefreshTokenFunction"];
  };
  "/signalr/conducts/negotiate": {
    /** @description Negotiates SignalR connection for conducts hub. */
    post: operations["ConductsNegotiateFunction"];
  };
  "/signalr/contacts/negotiate": {
    /** @description Negotiates SignalR connection for entities hub. */
    post: operations["ContactsNegotiateFunction"];
  };
  "/share/entity": {
    /** @description Shared the entity with users. */
    post: operations["ShareEntityFunction"];
    /** @description Un-shared the entity from users. */
    delete: operations["UnShareEntityFunction"];
  };
  "/entity": {
    /** @description Retrieves all available entities. */
    get: operations["EntityRetrieveFunction"];
    /** @description Creates or updates entity. Will create entity if Id is not provided. */
    post: operations["EntityUpsertFunction"];
    /** @description Deletes the entity. */
    delete: operations["EntityDeleteFunction"];
  };
  "/entity/{id}": {
    /** @description Retrieves entity. */
    get: operations["EntityRetrieveSingleFunction"];
  };
  "/entity/{id}/contacts/{channelName}/{contactName}": {
    /** @description Sets contact value. */
    put: operations["EntityContactSet"];
    /** @description Deletes the contact. */
    delete: operations["ContactDeleteFunction"];
  };
  "/contact/history": {
    /** @description Retrieves the contact history for provided duration. */
    get: operations["ContactHistoryRetrieveFunction"];
  };
  "/contact/metadata": {
    /** @description Contact metadata. */
    post: operations["ContactMetadataFunction"];
  };
  "/contact/set": {
    /** @description Sets contact value. */
    post: operations["ContactSetFunction"];
  };
  "/conducts/request": {
    /** @description Requests conduct to be executed. */
    post: operations["ConductRequestFunction"];
  };
  "/conducts/request-multiple": {
    /** @description Requests multiple conducts to be executed. */
    post: operations["ConductRequestMultipleFunction"];
  };
  "/auth/pats": {
    /** @description Retrieve all user PATs. */
    get: operations["PatsRetrieveFunction"];
    /** @description Creates new PAT. */
    post: operations["PatsCreateFunction"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    blobInfoDto: {
      name?: string;
      /** Format: date-time */
      createdTimeStamp?: string | null;
      /** Format: date-time */
      modifiedTimeStamp?: string | null;
      /** Format: int64 */
      size?: number | null;
    };
    conductRequestDto: {
      entityId: string;
      channelName: string;
      contactName: string;
      valueSerialized?: string;
      /** Format: double */
      delay?: number | null;
    };
    contactDto: {
      entityId?: string;
      contactName?: string;
      channelName?: string;
      valueSerialized?: string;
      /** Format: date-time */
      timeStamp?: string;
      metadata?: string;
    };
    contactHistoryResponseDto: {
      values?: components["schemas"]["timeStampValuePair"][];
    };
    contactMetadataDto: {
      entityId?: string;
      channelName?: string;
      contactName?: string;
      metadata?: string;
    };
    contactSetDto: {
      entityId?: string;
      channelName?: string;
      contactName?: string;
      valueSerialized?: string;
      /** Format: date-time */
      timeStamp?: string | null;
    };
    entityDeleteDto: {
      id: string;
    };
    entityDetailsDto: {
      /**
       * Format: int32
       * @default 0
       * @enum {integer}
       */
      type?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
      id?: string;
      alias?: string;
      contacts?: components["schemas"]["contactDto"][];
      sharedWith?: components["schemas"]["userDto"][];
    };
    entityUpsertDto: {
      id?: string;
      /**
       * Format: int32
       * @default 0
       * @enum {integer|null}
       */
      type: 0 | 1 | 2 | 3 | 4 | 5 | 6 | null;
      alias: string;
    };
    entityUpsertResponseDto: {
      id?: string;
    };
    entry: {
      /** Format: date-time */
      timeStamp?: string | null;
      /**
       * Format: int32
       * @default 0
       * @enum {integer|null}
       */
      level?: 0 | 1 | 2 | 3 | 4 | 5 | null;
      message?: string;
    };
    newsletterSubscribeDto: {
      email: string;
    };
    patCreateDto: {
      alias?: string;
      /** Format: date-time */
      expire?: string | null;
    };
    patCreateResponseDto: {
      pat?: string;
    };
    patDto: {
      userId?: string;
      patEnd?: string;
      alias?: string;
      /** Format: date-time */
      expire?: string | null;
    };
    shareRequestDto: {
      entityId: string;
      userEmails: string[];
    };
    signalRConnectionInfo: {
      url?: string;
      accessToken?: string;
    };
    stationRefreshTokenRequestDto: {
      refreshToken: string;
    };
    stationRefreshTokenResponseDto: {
      accessToken?: string;
      /** Format: date-time */
      expire?: string;
    };
    stationsLoggingPersistRequestDto: {
      stationId: string;
      entries: components["schemas"]["entry"][];
    };
    timeStampValuePair: {
      /** Format: date-time */
      timeStamp?: string;
      valueSerialized?: string;
    };
    unShareRequestDto: {
      entityId: string;
      userEmails: string[];
    };
    userDto: {
      id?: string;
      email?: string;
      fullName?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  HealthFunctions: {
    responses: {
      /** @description No description */
      200: {
        content: never;
      };
    };
  };
  /** @description Subscribe to a newsletter. */
  NewsletterFunction: {
    parameters: {
      header?: {
        /** @description hCaptcha response. */
        "HCAPTCHA-RESPONSE"?: string;
      };
    };
    /** @description Subscribe with email address. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["newsletterSubscribeDto"];
      };
    };
    responses: {
      /** @description No description */
      200: {
        content: never;
      };
      /** @description One or more required property is missing in request. */
      400: {
        content: never;
      };
    };
  };
  StationLoggingDownloadFunction: {
    parameters: {
      query: {
        /** @description The **stationId** parameter */
        stationId: string;
        /** @description The **blobName** parameter. Use list function to obtain available blobs. */
        blobName: string;
      };
    };
    responses: {
      /** @description One or more required property is missing in request. */
      400: {
        content: never;
      };
    };
  };
  StationLoggingListFunction: {
    parameters: {
      query: {
        /** @description The **StationID** parameter */
        stationId: string;
      };
    };
    responses: {
      /** @description List of blob infos. */
      200: {
        content: {
          "application/json": components["schemas"]["blobInfoDto"][];
        };
      };
      /** @description One or more required property is missing in request. */
      400: {
        content: never;
      };
    };
  };
  /** @description Appends logging entries. */
  StationLoggingPersistFunction: {
    /** @description The logging entries to persist per station. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["stationsLoggingPersistRequestDto"];
      };
    };
    responses: {
      /** @description No description */
      200: {
        content: never;
      };
      /** @description One or more required property is missing in request. */
      400: {
        content: never;
      };
    };
  };
  /** @description Refreshes the access token. */
  StationRefreshTokenFunction: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["stationRefreshTokenRequestDto"];
      };
    };
    responses: {
      /** @description Payload of StationRefreshTokenResponseDto */
      200: {
        content: {
          "application/json": components["schemas"]["stationRefreshTokenResponseDto"];
        };
      };
      /** @description One or more required property is missing in request. */
      400: {
        content: never;
      };
    };
  };
  /** @description Negotiates SignalR connection for conducts hub. */
  ConductsNegotiateFunction: {
    responses: {
      /** @description SignalR connection info. */
      200: {
        content: {
          "application/json": components["schemas"]["signalRConnectionInfo"];
        };
      };
    };
  };
  /** @description Negotiates SignalR connection for entities hub. */
  ContactsNegotiateFunction: {
    responses: {
      /** @description SignalR connection info. */
      200: {
        content: {
          "application/json": components["schemas"]["signalRConnectionInfo"];
        };
      };
    };
  };
  /** @description Shared the entity with users. */
  ShareEntityFunction: {
    /** @description Share one entity with one or more users. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["shareRequestDto"];
      };
    };
    responses: {
      /** @description No description */
      200: {
        content: never;
      };
      /** @description One or more required property is missing in request. */
      400: {
        content: never;
      };
    };
  };
  /** @description Un-shared the entity from users. */
  UnShareEntityFunction: {
    /** @description Un-share one entity with one or more users. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["unShareRequestDto"];
      };
    };
    responses: {
      /** @description No description */
      200: {
        content: never;
      };
      /** @description One or more required property is missing in request. */
      400: {
        content: never;
      };
    };
  };
  /** @description Retrieves all available entities. */
  EntityRetrieveFunction: {
    responses: {
      /** @description Payload of Array of EntityDetailsDto */
      200: {
        content: {
          "application/json": components["schemas"]["entityDetailsDto"][];
        };
      };
    };
  };
  /** @description Creates or updates entity. Will create entity if Id is not provided. */
  EntityUpsertFunction: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["entityUpsertDto"];
      };
    };
    responses: {
      /** @description Payload of EntityUpsertResponseDto */
      200: {
        content: {
          "application/json": components["schemas"]["entityUpsertResponseDto"];
        };
      };
    };
  };
  /** @description Deletes the entity. */
  EntityDeleteFunction: {
    /** @description Information about entity to delete. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["entityDeleteDto"];
      };
    };
    responses: {
      /** @description No description */
      200: {
        content: never;
      };
      /** @description One or more required property is missing in request. */
      400: {
        content: never;
      };
      /** @description No description */
      404: {
        content: never;
      };
    };
  };
  /** @description Retrieves entity. */
  EntityRetrieveSingleFunction: {
    parameters: {
      path: {
        /** @description Entity identifier */
        id: string;
      };
    };
    responses: {
      /** @description Payload of EntityDetailsDto */
      200: {
        content: {
          "application/json": components["schemas"]["entityDetailsDto"];
        };
      };
      /** @description No description */
      404: {
        content: never;
      };
    };
  };
  /** @description Sets contact value. */
  EntityContactSet: {
    parameters: {
      path: {
        /** @description Entity identifier */
        id: string;
        /** @description Channel name */
        channelName: string;
        /** @description Contact name */
        contactName: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["contactSetDto"];
      };
    };
    responses: {
      /** @description No description */
      200: {
        content: never;
      };
      /** @description One or more required property is missing in request. */
      400: {
        content: never;
      };
    };
  };
  /** @description Deletes the contact. */
  ContactDeleteFunction: {
    parameters: {
      path: {
        /** @description Entity identifier */
        id: string;
        /** @description Channel name */
        channelName: string;
        /** @description Contact name */
        contactName: string;
      };
    };
    responses: {
      /** @description No description */
      200: {
        content: never;
      };
    };
  };
  /** @description Retrieves the contact history for provided duration. */
  ContactHistoryRetrieveFunction: {
    responses: {
      /** @description Payload of ContactHistoryResponseDto */
      200: {
        content: {
          "application/json": components["schemas"]["contactHistoryResponseDto"];
        };
      };
      /** @description One or more required property is missing in request. */
      400: {
        content: never;
      };
    };
  };
  /** @description Contact metadata. */
  ContactMetadataFunction: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["contactMetadataDto"];
      };
    };
    responses: {
      /** @description No description */
      200: {
        content: never;
      };
      /** @description One or more required property is missing in request. */
      400: {
        content: never;
      };
    };
  };
  /** @description Sets contact value. */
  ContactSetFunction: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["contactSetDto"];
      };
    };
    responses: {
      /** @description No description */
      200: {
        content: never;
      };
      /** @description One or more required property is missing in request. */
      400: {
        content: never;
      };
    };
  };
  /** @description Requests conduct to be executed. */
  ConductRequestFunction: {
    /** @description The conduct to execute. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["conductRequestDto"];
      };
    };
    responses: {
      /** @description No description */
      200: {
        content: never;
      };
      /** @description One or more required property is missing in request. */
      400: {
        content: never;
      };
    };
  };
  /** @description Requests multiple conducts to be executed. */
  ConductRequestMultipleFunction: {
    /** @description Collection of conducts to execute. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["conductRequestDto"][];
      };
    };
    responses: {
      /** @description No description */
      200: {
        content: never;
      };
      /** @description One or more required property is missing in request. */
      400: {
        content: never;
      };
    };
  };
  /** @description Retrieve all user PATs. */
  PatsRetrieveFunction: {
    responses: {
      /** @description Payload of Array of PatDto */
      200: {
        content: {
          "application/json": components["schemas"]["patDto"][];
        };
      };
    };
  };
  /** @description Creates new PAT. */
  PatsCreateFunction: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["patCreateDto"];
      };
    };
    responses: {
      /** @description Payload of PatCreateResponseDto */
      200: {
        content: {
          "application/json": components["schemas"]["patCreateResponseDto"];
        };
      };
    };
  };
}
